import HttpClient from './HttpClient.js';
import LogUtils from '../utils/LogUtils.js';

class CoupangCombinedScraper {
  constructor(options = {}) {
    this.httpClient = new HttpClient({
      timeout: 30000,
      enableCookies: true,
      ...options,
    });
    this.logUtils = new LogUtils(options);

    // Rate limiting: Î≤§ÎçîÎãπ 2Î≤à ÏöîÏ≤≠Ïù¥ÎØÄÎ°ú 200ms Í∞ÑÍ≤© (300 requests per minute)
    this.rateLimitDelay = 200; // milliseconds
    this.lastRequestTime = 0;
  }

  async waitForRateLimit() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    if (timeSinceLastRequest < this.rateLimitDelay) {
      const waitTime = this.rateLimitDelay - timeSinceLastRequest;
      await new Promise((resolve) => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
  }

  async getVendorInfo(storeId = 0, vendorId, urlName = '') {
    try {
      await this.waitForRateLimit();

      let url = `https://shop.coupang.com/api/v1/store/getStoreReview?storeId=${storeId}&vendorId=${vendorId}`;
      if (urlName) {
        url += `&urlName=${urlName}`;
      }

      const headers = {
        'User-Agent':
          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        Accept: 'application/json, text/plain, */*',
        'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
        Referer: 'https://shop.coupang.com/',
        Origin: 'https://shop.coupang.com',
      };

      const response = await this.httpClient.get(url, {}, headers);

      return {
        success: true,
        storeId,
        vendorId,
        data: response.data,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logUtils.logError(error, `combined_vendor_error_${vendorId}`);

      return {
        success: false,
        storeId,
        vendorId,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  async getProductList(params) {
    try {
      await this.waitForRateLimit();

      const url = 'https://shop.coupang.com/api/v1/listing';

      const defaultParams = {
        storeId: params.storeId || 0,
        brandId: params.brandId || 0,
        vendorId: params.vendorId,
        sourceProductId: params.sourceProductId || 0,
        sourceVendorItemId: params.sourceVendorItemId || 0,
        source: params.source || 'brandstore_sdp_atf',
        enableAdultItemDisplay: params.enableAdultItemDisplay !== false,
        nextPageKey: params.nextPageKey || 0,
        filter: params.filter || 'SORT_KEY:',
      };

      const headers = {
        'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
        'Content-Type': 'application/json',
        Accept: 'application/json, text/plain, */*',
        'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
        Referer: 'https://shop.coupang.com/',
        Origin: 'https://shop.coupang.com',
      };

      const response = await this.httpClient.post(url, defaultParams, headers);

      return {
        success: true,
        vendorId: params.vendorId,
        storeId: defaultParams.storeId,
        data: response.data,
        timestamp: new Date().toISOString(),
        requestParams: defaultParams,
      };
    } catch (error) {
      this.logUtils.logError(
        error,
        `combined_product_error_${params.vendorId}`
      );

      return {
        success: false,
        vendorId: params.vendorId,
        storeId: params.storeId,
        error: error.message,
        timestamp: new Date().toISOString(),
        requestParams: params,
      };
    }
  }

  async getAllProducts(vendorId, storeId = 0, maxProducts = 10000000) {
    const allProducts = [];
    let nextPageKey = 0;
    let currentPage = 1;

    console.log(`${vendorId} ÏÉÅÌíà ÏàòÏßë ÏãúÏûë (ÏµúÎåÄ ${maxProducts}Í∞ú)`);

    while (allProducts.length < maxProducts) {
      console.log(
        `ÌéòÏù¥ÏßÄ ${currentPage} ÏàòÏßë Ï§ë... (nextPageKey: ${nextPageKey})`
      );

      const result = await this.getProductList({
        vendorId,
        storeId,
        nextPageKey,
      });

      if (!result.success) {
        console.log(`‚ùå ÌéòÏù¥ÏßÄ ${currentPage} ÏàòÏßë Ïã§Ìå®: ${result.error}`);
        break;
      }

      const products = result.data?.data?.products || [];
      if (products.length === 0) {
        console.log(`ÌéòÏù¥ÏßÄ ${currentPage}ÏóêÏÑú ÏÉÅÌíàÏù¥ ÏóÜÏùå. ÏàòÏßë Ï¢ÖÎ£å.`);
        break;
      }

      // ÌïÑÏöîÌïú ÎßåÌÅºÎßå Ï∂îÍ∞ÄÌïòÍ≥† ÏàòÏßëÏãúÍ∞Ñ Ï∂îÍ∞Ä
      const remainingNeeded = maxProducts - allProducts.length;
      const productsToAdd = products
        .slice(0, remainingNeeded)
        .map((product) => ({
          ...product,
          collectedAt: new Date().toISOString(),
        }));

      allProducts.push(...productsToAdd);
      console.log(
        `ÌéòÏù¥ÏßÄ ${currentPage}: ${productsToAdd.length}Í∞ú ÏÉÅÌíà ÏàòÏßë (Ï¥ù ${allProducts.length}Í∞ú)`
      );

      // Î™©Ìëú Í∞úÏàòÏóê ÎèÑÎã¨ÌïòÎ©¥ Ï¢ÖÎ£å
      if (allProducts.length >= maxProducts) {
        console.log(`Î™©Ìëú ÏÉÅÌíà Ïàò ${maxProducts}Í∞ú Îã¨ÏÑ±. ÏàòÏßë Ï¢ÖÎ£å.`);
        break;
      }

      // Îã§Ïùå ÌéòÏù¥ÏßÄÎäî nextPageKeyÎ•º 1Ïî© Ï¶ùÍ∞Ä
      nextPageKey++;
      currentPage++;
    }

    return allProducts;
  }

  async collectCombinedData(vendorIds, storeId = 0, maxProductsPerVendor = 5) {
    const results = [];

    console.log(`Ïø†Ìå° ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë: ${vendorIds.length}Í∞ú Î≤§Îçî`);
    
    // ÌîÑÎ°ùÏãú ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî Î°úÍπÖ
    if (this.httpClient.proxies.length > 0) {
      console.log(`üì° ÌîÑÎ°ùÏãú ${this.httpClient.proxies.length}Í∞ú ÏÇ¨Ïö© Ï§ë`);
    }

    for (const vendorId of vendorIds) {
      console.log(`\n=== Ï≤òÎ¶¨ Ï§ë: vendorId ${vendorId} ===`);

      // 1. Î≤§Îçî Ï†ïÎ≥¥ ÏàòÏßë
      const vendorResult = await this.getVendorInfo(storeId, vendorId);

      if (!vendorResult.success) {
        console.log(`‚ùå Î≤§Îçî Ï†ïÎ≥¥ Ïã§Ìå®: ${vendorId} - ${vendorResult.error}`);
        continue;
      }

      // Î≤§Îçî Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ (null nameÏù¥ÎÇò Îπà vendorId Ï†úÏô∏)
      const vendorData = vendorResult.data;
      if (
        !vendorData ||
        vendorData.name === null ||
        !vendorData.vendorId ||
        vendorData.vendorId.trim() === ''
      ) {
        console.log(`‚ùå Î≤§Îçî Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå: ${vendorId}`);
        continue;
      }

      console.log(`‚úÖ Î≤§Îçî Ï†ïÎ≥¥ ÏÑ±Í≥µ: ${vendorId} - ${vendorData.name}`);

      // 2. ÏÉÅÌíà Ï†ïÎ≥¥ ÏàòÏßë
      const products = await this.getAllProducts(
        vendorId,
        storeId,
        maxProductsPerVendor
      );

      if (products.length === 0) {
        console.log(`‚ö†Ô∏è  ÏÉÅÌíà ÏóÜÏùå: ${vendorId} - Î≤§Îçî Ï†ïÎ≥¥Îßå Ï†ÄÏû•`);
        // ÏÉÅÌíàÏù¥ ÏóÜÏñ¥ÎèÑ Î≤§Îçî Ï†ïÎ≥¥Îäî Ï†ÄÏû• (ÏÉÅÌíà Ïª¨ÎüºÏùÄ ÎπàÍ∞í)
        results.push({
          ...vendorData,
          vendorId,
          storeId: vendorResult.storeId,
          ÏàòÏßëÏãúÍ∞Ñ: vendorResult.timestamp,
          ÏÉÅÌíàÎ™Ö: '',
          ÏÉÅÌíàÎßÅÌÅ¨: '',
          ÏÉÅÌíàID: '',
          ÏÉÅÌíàÏàòÏßëÏãúÍ∞Ñ: '',
        });
      } else {
        console.log(`‚úÖ ÏÉÅÌíà ÏàòÏßë ÏÑ±Í≥µ: ${vendorId} - ${products.length}Í∞ú`);

        // 3. Î≤§Îçî Ï†ïÎ≥¥ÏôÄ ÏÉÅÌíà Ï†ïÎ≥¥ Í≤∞Ìï© (ÏÉÅÌíà Í∞úÏàòÎßåÌÅº Î≤§Îçî Ï†ïÎ≥¥ Ï§ëÎ≥µ)
        products.forEach((product) => {
          results.push({
            ...vendorData, // Î≤§Îçî Ï†ïÎ≥¥ Ï†ÑÏ≤¥
            vendorId,
            storeId: vendorResult.storeId,
            ÏàòÏßëÏãúÍ∞Ñ: vendorResult.timestamp,
            ÏÉÅÌíàÎ™Ö: product.imageAndTitleArea?.title || '',
            ÏÉÅÌíàÎßÅÌÅ¨: product.link || '',
            ÏÉÅÌíàID: product.productId || '',
            ÏÉÅÌíàÏàòÏßëÏãúÍ∞Ñ: product.collectedAt || '',
          });
        });
      }
    }

    console.log(`\nÌÜµÌï© Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å: Ï¥ù ${results.length}Ìñâ`);
    
    // ÌîÑÎ°ùÏãú ÌÜµÍ≥Ñ Ï∂úÎ†•
    if (this.httpClient.proxies.length > 0) {
      this.httpClient.logProxyStats();
    }
    
    return results;
  }

  async collectCombinedByRange(
    startVendorId = 1,
    endVendorId = 100,
    storeId = 0,
    maxProductsPerVendor = 5
  ) {
    const vendorIds = [];

    for (
      let vendorIdNum = startVendorId;
      vendorIdNum <= endVendorId;
      vendorIdNum++
    ) {
      const vendorId = `A${String(vendorIdNum).padStart(8, '0')}`;
      vendorIds.push(vendorId);
    }

    return await this.collectCombinedData(
      vendorIds,
      storeId,
      maxProductsPerVendor
    );
  }
}

export default CoupangCombinedScraper;

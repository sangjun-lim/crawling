import BaseScraper from './BaseScraper.js';
import { chromium } from 'playwright-extra';
import stealth from 'puppeteer-extra-plugin-stealth';
import AntiDetectionUtils from '../utils/AntiDetectionUtils.js';
import fs from 'fs';
import { promises as fsPromises } from 'fs';
import { FingerprintGenerator } from 'fingerprint-generator';

class NaverShoppingScraper extends BaseScraper {
  constructor(options = {}) {
    super(options);

    this.options = {
      headless: options.headless ?? true,
      timeout: options.timeout ?? 30000,
      slowMo: options.slowMo ?? 100,
      saveData: options.saveData ?? true,
      ...options,
    };

    this.browser = null;
    this.context = null;
    this.page = null;
  }

  async init() {
    try {
      // Î∂ÄÎ™® ÌÅ¥ÎûòÏä§ Ï¥àÍ∏∞Ìôî (ÌîÑÎ°ùÏãú ÌÖåÏä§Ìä∏ Ìè¨Ìï®)
      await super.init();
      this.logInfo('Playwright-Extra + FingerprintGenerator Ï¥àÍ∏∞Ìôî Ï§ë...');

      // Stealth ÌîåÎü¨Í∑∏Ïù∏ ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî (Ìó§Îçî ÌÖåÏä§Ìä∏Ïö©)
      chromium.use(stealth());
      const fingerprintGenerator = new FingerprintGenerator({
        devices: ['mobile'],
        operatingSystems: ['android'],
        browsers: [{ name: 'chrome', minVersion: 120, maxVersion: 130 }],
        locales: ['ko-KR', 'en-US'],
        mockWebRTC: true,
      });
      const fingerprint = fingerprintGenerator.getFingerprint();

      // ÎîîÎ≤ÑÍπÖ: fingerprint Íµ¨Ï°∞ ÌôïÏù∏
      console.log('Fingerprint Íµ¨Ï°∞:', JSON.stringify(fingerprint, null, 2));

      const launchOptions = {
        headless: false,
        slowMo: this.options.slowMo,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-blink-features=AutomationControlled',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-field-trial-config',
          '--disable-hang-monitor',
          '--disable-ipc-flooding-protection',
          '--no-first-run',
          '--no-default-browser-check',
          '--no-zygote',
          '--disable-extensions-except',
          '--disable-extensions',
          '--disable-default-apps',
          '--window-size=375,812',
          // Ïã§Ï†ú Î∏åÎùºÏö∞Ï†ÄÏôÄ Îçî Ïú†ÏÇ¨ÌïòÍ≤å
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
        ],
        ignoreDefaultArgs: [
          '--enable-automation',
          '--enable-blink-features=AutomationControlled',
        ],
      };

      // ÌîÑÎ°ùÏãú ÏÑ§Ï†ï Ï†ÅÏö©
      const playwrightProxyConfig = this.getPlaywrightProxyConfig();
      if (playwrightProxyConfig) {
        launchOptions.proxy = playwrightProxyConfig;
        this.logInfo(`ÌîÑÎ°ùÏãú ÏÑ§Ï†ï Ï†ÅÏö©: ${playwrightProxyConfig.server}`);
      }

      this.browser = await chromium.launch(launchOptions);

      this.context = await this.browser.newContext({
        userAgent: fingerprint.headers['user-agent'],
        viewport: {
          width: fingerprint.fingerprint.screen.width,
          height: fingerprint.fingerprint.screen.height,
        },
        locale: 'ko-KR',
        timezoneId: 'Asia/Seoul',
        extraHTTPHeaders: fingerprint.headers,
        deviceScaleFactor: fingerprint.fingerprint.screen.devicePixelRatio,
        hasTouch: true,
        isMobile: true,
      });

      this.page = await this.context.newPage();

      // fingerprint JS Ïä§ÌÅ¨Î¶ΩÌä∏ Ï∂îÍ∞Ä (ÏµúÏã† API ÏÇ¨Ïö©)
      try {
        const fingerprintJS = fingerprintGenerator.getJS();
        if (fingerprintJS) {
          await this.context.addInitScript({ content: fingerprintJS });
          this.logInfo('‚úÖ Fingerprint JS Ïä§ÌÅ¨Î¶ΩÌä∏ Ï†ÅÏö© ÏôÑÎ£å');
        } else {
          this.logInfo(
            '‚ö†Ô∏è Fingerprint JSÍ∞Ä ÏóÜÏùå - Í∏∞Î≥∏ ÏïàÌã∞ ÌÉêÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏Îßå ÏÇ¨Ïö©'
          );
        }
      } catch (jsError) {
        this.logInfo(
          `‚ö†Ô∏è Fingerprint JS ÏÉùÏÑ± Ïã§Ìå®: ${jsError.message} - Í∏∞Î≥∏ ÏïàÌã∞ ÌÉêÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏Îßå ÏÇ¨Ïö©`
        );
      }
      await this.context.addInitScript(() => {
        // webdriver ÏÜçÏÑ±ÏùÄ ÌôïÏã§ÌïòÍ≤å Ï†úÍ±∞
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined,
        });
        // Playwright ÌäπÏ†ï ÌùîÏ†Å Ï†úÍ±∞
        delete window.__playwright;
      });

      // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠/ÏùëÎãµ Î°úÍπÖ ÏÑ§Ï†ï
      this.page.on('request', async (request) => {
        const url = request.url();
        if (url.includes('shopping.naver.com') || url.includes('search')) {
          this.logInfo(`üîµ REQUEST: ${request.method()} ${url}`);
          this.logInfo(
            `üì§ Headers: ${JSON.stringify(request.headers(), null, 2)}`
          );

          // Ïø†ÌÇ§ Ï†ïÎ≥¥ÎèÑ Î°úÍπÖ
          const cookies = await this.context.cookies(url);
          if (cookies.length > 0) {
            this.logInfo(`üç™ Cookies: ${JSON.stringify(cookies, null, 2)}`);
          } else {
            this.logInfo(`üç™ Cookies: ÏóÜÏùå`);
          }

          const postData = request.postData();
          if (postData) {
            this.logInfo(`üì§ Body: ${postData}`);
          }
        }
      });

      this.page.on('response', async (response) => {
        const url = response.url();
        if (url.includes('shopping.naver.com') || url.includes('search')) {
          this.logInfo(`üî¥ RESPONSE: ${response.status()} ${url}`);
          this.logInfo(
            `üì• Headers: ${JSON.stringify(response.headers(), null, 2)}`
          );

          // 418 ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ ÏùëÎãµ ÎÇ¥Ïö©ÎèÑ ÌôïÏù∏
          if (response.status() === 418) {
            try {
              const responseText = await response.text();
              this.logInfo(
                `üìÑ 418 ÏùëÎãµ ÎÇ¥Ïö© (Ï≤òÏùå 500Ïûê): ${responseText.substring(
                  0,
                  500
                )}`
              );
            } catch (textError) {
              this.logInfo(`üìÑ ÏùëÎãµ ÎÇ¥Ïö© ÏùΩÍ∏∞ Ïã§Ìå®: ${textError.message}`);
            }
          }
        }
      });

      // Í∞ïÎ†•Ìïú ÌÉêÏßÄ Î∞©ÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏
      // await this.context.addInitScript(() => {
      //   // webdriver ÏÜçÏÑ± ÏôÑÏ†Ñ Ï†úÍ±∞
      //   Object.defineProperty(navigator, 'webdriver', {
      //     get: () => undefined,
      //   });

      //   // Chrome DevTools Protocol Í¥ÄÎ†® ÏÜçÏÑ± Ï†úÍ±∞
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_JSON;
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_Object;
      //   delete window.cdc_adoQpoasnfa76pfcZLmcfl_Proxy;

      //   // Playwright Î∞è ÏûêÎèôÌôî ÎèÑÍµ¨ ÌùîÏ†Å Ï†úÍ±∞
      //   delete window.__playwright;
      //   delete window.__webdriver_script_fn;
      //   delete window.__webdriver_evaluate;
      //   delete window.__selenium_unwrapped;
      //   delete window.__webdriver_unwrapped;
      //   delete window.__driver_evaluate;
      //   delete window.__webdriver_script_func;
      //   delete window.__fxdriver_evaluate;
      //   delete window.__fxdriver_unwrapped;
      //   delete window.__nightmare;
      //   delete window.phantom;
      //   delete window.callPhantom;

      //   // Ï∂îÍ∞Ä ÏûêÎèôÌôî ÎèÑÍµ¨ ÌùîÏ†Å Ï†úÍ±∞
      //   delete window.domAutomation;
      //   delete window.domAutomationController;
      //   delete window.htmlWebdriverApi;
      //   delete window.selenium;
      //   delete window._Selenium_IDE_Recorder;
      //   delete window._selenium;
      //   delete window.calledSelenium;
      //   delete window._WEBDRIVER_ELEM_CACHE;
      //   delete window.ChromeDriverw;
      //   delete window.driver;
      //   delete window.webdriver;

      //   // performance.timing ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏúÑÏû•
      //   if (window.performance && window.performance.timing) {
      //     const timing = window.performance.timing;
      //     const fakeStart = Date.now() - Math.random() * 5000;
      //     Object.defineProperty(timing, 'navigationStart', {
      //       get: () => fakeStart,
      //     });
      //     Object.defineProperty(timing, 'loadEventEnd', {
      //       get: () => fakeStart + Math.random() * 3000 + 1000,
      //     });
      //   }

      //   // Chrome runtime Î∞è extension API ÏôÑÏ†Ñ ÏúÑÏû•
      //   if (!window.chrome) {
      //     window.chrome = {};
      //   }

      //   Object.defineProperty(window.chrome, 'runtime', {
      //     value: {
      //       onConnect: {
      //         addListener: function () {},
      //         removeListener: function () {},
      //         hasListener: function () {
      //           return false;
      //         },
      //       },
      //       onMessage: {
      //         addListener: function () {},
      //         removeListener: function () {},
      //         hasListener: function () {
      //           return false;
      //         },
      //       },
      //       connect: function () {
      //         return { onMessage: { addListener: function () {} } };
      //       },
      //       sendMessage: function () {},
      //       getManifest: function () {
      //         return {};
      //       },
      //       getURL: function (path) {
      //         return 'chrome-extension://invalid/' + path;
      //       },
      //     },
      //     writable: false,
      //     configurable: false,
      //   });

      //   // loadTimes API ÏúÑÏû•
      //   if (!window.chrome.loadTimes) {
      //     Object.defineProperty(window.chrome, 'loadTimes', {
      //       value: function () {
      //         return {
      //           requestTime: performance.timing.navigationStart / 1000,
      //           startLoadTime: performance.timing.navigationStart / 1000,
      //           commitLoadTime: performance.timing.responseStart / 1000,
      //           finishDocumentLoadTime:
      //             performance.timing.domContentLoadedEventEnd / 1000,
      //           finishLoadTime: performance.timing.loadEventEnd / 1000,
      //           firstPaintTime: performance.timing.loadEventEnd / 1000,
      //           firstPaintAfterLoadTime: 0,
      //           navigationType: 'Other',
      //           wasFetchedViaSpdy: false,
      //           wasNpnNegotiated: false,
      //           npnNegotiatedProtocol: 'unknown',
      //           wasAlternateProtocolAvailable: false,
      //           connectionInfo: 'http/1.1',
      //         };
      //       },
      //       writable: false,
      //       configurable: false,
      //     });
      //   }

      //   // Í∂åÌïú Í¥ÄÎ†® API ÏôÑÏ†Ñ ÏúÑÏû•
      //   const originalQuery = window.navigator.permissions?.query;
      //   if (originalQuery) {
      //     window.navigator.permissions.query = function (parameters) {
      //       const permissionStatus = {
      //         state:
      //           parameters.name === 'notifications'
      //             ? Notification.permission || 'default'
      //             : 'granted',
      //         addEventListener: function () {},
      //         removeEventListener: function () {},
      //       };
      //       return Promise.resolve(permissionStatus);
      //     };
      //   }

      //   // WebGL ÏôÑÏ†Ñ ÏúÑÏû• (Îçî Ï†ïÍµêÌïòÍ≤å)
      //   const contexts = [
      //     'webgl',
      //     'webgl2',
      //     'experimental-webgl',
      //     'experimental-webgl2',
      //   ];
      //   const getContext = HTMLCanvasElement.prototype.getContext;

      //   HTMLCanvasElement.prototype.getContext = function (
      //     contextType,
      //     contextAttributes
      //   ) {
      //     if (contexts.includes(contextType)) {
      //       const context = getContext.call(
      //         this,
      //         contextType,
      //         contextAttributes
      //       );
      //       if (context) {
      //         const getParameter = context.getParameter;
      //         context.getParameter = function (parameter) {
      //           // GPU Ï†ïÎ≥¥ ÏúÑÏû•
      //           if (parameter === 37445) return 'Intel Inc.'; // VENDOR
      //           if (parameter === 37446) return 'Intel Iris Pro OpenGL Engine'; // RENDERER
      //           if (parameter === 7936)
      //             return 'WebGL 1.0 (OpenGL ES 2.0 Chromium)'; // VERSION
      //           if (parameter === 35724)
      //             return 'WebGL GLSL ES 1.0 (OpenGL ES GLSL ES 1.0 Chromium)'; // SHADING_LANGUAGE_VERSION

      //           // Í∏∞ÌÉÄ ÌååÎùºÎØ∏ÌÑ∞Îì§
      //           if (parameter === 34921) return new Float32Array([1, 1]); // ALIASED_LINE_WIDTH_RANGE
      //           if (parameter === 34930) return new Float32Array([1, 1024]); // ALIASED_POINT_SIZE_RANGE
      //           if (parameter === 3379) return 16384; // MAX_TEXTURE_SIZE
      //           if (parameter === 34076) return 16384; // MAX_CUBE_MAP_TEXTURE_SIZE

      //           return getParameter.call(this, parameter);
      //         };
      //       }
      //       return context;
      //     }
      //     return getContext.call(this, contextType, contextAttributes);
      //   };

      //   // Canvas fingerprinting Î∞©ÏßÄ
      //   const getImageData = CanvasRenderingContext2D.prototype.getImageData;
      //   CanvasRenderingContext2D.prototype.getImageData = function (
      //     sx,
      //     sy,
      //     sw,
      //     sh
      //   ) {
      //     const imageData = getImageData.call(this, sx, sy, sw, sh);
      //     // Îß§Ïö∞ ÎØ∏ÏÑ∏Ìïú ÎÖ∏Ïù¥Ï¶à Ï∂îÍ∞Ä
      //     for (let i = 0; i < imageData.data.length; i += 4) {
      //       if (Math.random() < 0.001) {
      //         imageData.data[i] = Math.max(
      //           0,
      //           Math.min(255, imageData.data[i] + Math.random() - 0.5)
      //         );
      //       }
      //     }
      //     return imageData;
      //   };

      //   // ÌîåÎü¨Í∑∏Ïù∏ Ï†ïÎ≥¥ Îçî ÌòÑÏã§Ï†ÅÏúºÎ°ú ÏúÑÏû•
      //   const plugins = [
      //     {
      //       name: 'Chrome PDF Plugin',
      //       filename: 'internal-pdf-viewer',
      //       description: 'Portable Document Format',
      //       length: 1,
      //     },
      //     {
      //       name: 'Chrome PDF Viewer',
      //       filename: 'mhjfbmdgcfjbbpaeojofohoefgiehjai',
      //       description: '',
      //       length: 1,
      //     },
      //     {
      //       name: 'Native Client',
      //       filename: 'internal-nacl-plugin',
      //       description: '',
      //       length: 2,
      //     },
      //   ];

      //   Object.defineProperty(navigator, 'plugins', {
      //     get: () => plugins,
      //   });

      //   // Ïñ∏Ïñ¥ ÏÑ§Ï†ï Îçî ÏûêÏó∞Ïä§ÎüΩÍ≤å
      //   Object.defineProperty(navigator, 'languages', {
      //     get: () => ['ko-KR', 'ko', 'en-US', 'en'],
      //   });

      //   // ÌïòÎìúÏõ®Ïñ¥ Ï†ïÎ≥¥ ÏúÑÏû•
      //   Object.defineProperty(navigator, 'hardwareConcurrency', {
      //     get: () =>
      //       Math.max(2, Math.min(navigator.hardwareConcurrency || 4, 16)),
      //   });

      //   // Î©îÎ™®Î¶¨ Ï†ïÎ≥¥ ÏúÑÏû• (ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå)
      //   if (navigator.deviceMemory) {
      //     Object.defineProperty(navigator, 'deviceMemory', {
      //       get: () => 8,
      //     });
      //   }

      //   // Connection API ÏúÑÏû•
      //   if (navigator.connection) {
      //     Object.defineProperty(navigator, 'connection', {
      //       get: () => ({
      //         effectiveType: '4g',
      //         type: 'wifi',
      //         downlink: 10,
      //         rtt: 50,
      //         saveData: false,
      //       }),
      //     });
      //   }

      //   // Timing API ÎÖ∏Ïù¥Ï¶à Ï∂îÍ∞Ä
      //   const originalNow = performance.now;
      //   performance.now = function () {
      //     return originalNow.call(this) + Math.random() * 0.1;
      //   };
      // });

      this.logSuccess('Playwright-Extra with Stealth Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      return true;
    } catch (error) {
      this.logError(`Playwright Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`);
      return false;
    }
  }

  /**
   * ÎûúÎç§ ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏÉùÏÑ± (ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏÇ¨Ïö©Ïûê ÌñâÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò)
   */
  async randomWait(min = 800, max = 2500) {
    const waitTime = Math.floor(Math.random() * (max - min + 1)) + min;
    await this.page.waitForTimeout(waitTime);
  }

  /**
   * Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨ - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏàòÎèôÏúºÎ°ú Ìï¥Í≤∞Ìï† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
   */
  async waitForSecurityCheck() {
    try {
      // ÌéòÏù¥ÏßÄ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏôÑÎ£å ÎåÄÍ∏∞
      await this.page.waitForLoadState('domcontentloaded', { timeout: 10000 });
      await this.randomWait(2000, 3000);

      let pageContent;
      try {
        // Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Í∞êÏßÄ
        pageContent = await this.page.content();
      } catch (contentError) {
        this.logInfo('ÌéòÏù¥ÏßÄ Ïª®ÌÖêÏ∏† Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå® - Ïû†Ïãú ÌõÑ Ïû¨ÏãúÎèÑ...');
        await this.randomWait(3000, 5000);
        pageContent = await this.page.content();
      }

      if (
        pageContent.includes('Î≥¥Ïïà ÌôïÏù∏ÏùÑ ÏôÑÎ£åÌï¥ Ï£ºÏÑ∏Ïöî') ||
        pageContent.includes('Î≥¥ÏïàÎ¨∏Ïûê') ||
        pageContent.includes('captcha') ||
        pageContent.includes('ÏòÅÏàòÏ¶ù')
      ) {
        this.logInfo('üö® Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Í∞êÏßÄ - ÏÇ¨Ïö©Ïûê ÏûÖÎ†• ÎåÄÍ∏∞ Ï§ë...');
        this.logInfo('üëÜ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Î≥¥Ïïà ÌôïÏù∏ÏùÑ ÏôÑÎ£åÌï¥ Ï£ºÏÑ∏Ïöî.');

        // Î≥¥Ïïà ÌôïÏù∏Ïù¥ ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞ (ÏµúÎåÄ 10Î∂Ñ)
        const maxWaitTime = 10 * 60 * 1000; // 10Î∂Ñ
        const checkInterval = 3000; // 3Ï¥àÎßàÎã§ ÌôïÏù∏
        let waitedTime = 0;

        while (waitedTime < maxWaitTime) {
          await this.page.waitForTimeout(checkInterval);
          waitedTime += checkInterval;

          // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÎÇ¥Ïö© Îã§Ïãú ÌôïÏù∏
          let currentContent;
          try {
            currentContent = await this.page.content();
          } catch (contentError) {
            this.logInfo('ÌéòÏù¥ÏßÄ Ïª®ÌÖêÏ∏† Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå® - Í≥ÑÏÜç ÎåÄÍ∏∞...');
            continue;
          }
          const currentUrl = this.page.url();

          // Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄÎ•º Î≤óÏñ¥ÎÇ¨ÎäîÏßÄ ÌôïÏù∏
          if (
            !currentContent.includes('Î≥¥Ïïà ÌôïÏù∏ÏùÑ ÏôÑÎ£åÌï¥ Ï£ºÏÑ∏Ïöî') &&
            !currentContent.includes('Î≥¥ÏïàÎ¨∏Ïûê') &&
            !currentContent.includes('captcha') &&
            !currentContent.includes('ÏòÅÏàòÏ¶ù') &&
            (currentUrl.includes('naver.com') ||
              currentUrl.includes('shopping'))
          ) {
            this.logSuccess('‚úÖ Î≥¥Ïïà ÌôïÏù∏ ÏôÑÎ£å Í∞êÏßÄ - Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.');
            break;
          }

          // ÏßÑÌñâ ÏÉÅÌô© Î°úÍ∑∏
          const remainingMinutes = Math.ceil(
            (maxWaitTime - waitedTime) / 60000
          );
          this.logInfo(
            `‚è≥ Î≥¥Ïïà ÌôïÏù∏ ÎåÄÍ∏∞ Ï§ë... (ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${remainingMinutes}Î∂Ñ)`
          );
        }

        if (waitedTime >= maxWaitTime) {
          this.logError('‚ö†Ô∏è Î≥¥Ïïà ÌôïÏù∏ ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º (10Î∂Ñ)');
          throw new Error('Î≥¥Ïïà ÌôïÏù∏ ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º');
        }

        // CAPTCHA ÏôÑÎ£å ÌõÑ ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏
        this.logInfo('üîç CAPTCHA ÏôÑÎ£å ÌõÑ ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...');

        // ÌòÑÏû¨ Ïø†ÌÇ§ ÌôïÏù∏
        const cookies = await this.context.cookies();
        this.logInfo(`üç™ Î≥¥Ïú† Ïø†ÌÇ§ Ïàò: ${cookies.length}`);

        cookies.forEach((cookie, index) => {
          this.logInfo(
            `üç™ Ïø†ÌÇ§ ${index + 1}: ${cookie.name} = ${cookie.value.substring(
              0,
              20
            )}...`
          );
        });

        // ÌéòÏù¥ÏßÄ URLÍ≥º ÏÉÅÌÉú ÌôïÏù∏
        const finalUrl = this.page.url();
        this.logInfo(`üìç CAPTCHA ÏôÑÎ£å ÌõÑ ÏµúÏ¢Ö URL: ${finalUrl}`);

        // ÌéòÏù¥ÏßÄ ÌÉÄÏù¥ÌãÄ ÌôïÏù∏
        const pageTitle = await this.page.title();
        this.logInfo(`üìã ÌéòÏù¥ÏßÄ Ï†úÎ™©: ${pageTitle}`);

        // ÌéòÏù¥ÏßÄÏóê Í≤ÄÏÉâÏ∞ΩÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const hasSearchInput =
          (await this.page.$('input[type="text"]')) !== null;
        this.logInfo(
          `üîç Í≤ÄÏÉâÏ∞Ω Ï°¥Ïû¨ Ïó¨Î∂Ä: ${hasSearchInput ? 'ÏûàÏùå' : 'ÏóÜÏùå'}`
        );
      }
    } catch (error) {
      this.logError(`Î≥¥Ïïà ÌôïÏù∏ Ï≤òÎ¶¨ Ïò§Î•ò: ${error.message}`);
      throw error;
    }
  }

  /**
   * ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú ÌéòÏù¥ÏßÄ Í∞êÏßÄ
   */
  async checkServiceRestriction() {
    try {
      const pageContent = await this.page.content();
      const currentUrl = this.page.url();

      // ÏÑúÎπÑÏä§ Ï†úÌïú ÌéòÏù¥ÏßÄ Í∞êÏßÄ
      const isRestricted =
        pageContent.includes('ÏùºÏãúÏ†ÅÏúºÎ°ú Ï†úÌïú') ||
        pageContent.includes('VPNÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ï†ëÏÜç');

      if (isRestricted) {
        this.logInfo('üö® ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú ÌéòÏù¥ÏßÄ Í∞êÏßÄ');
        return true;
      }

      return false;
    } catch (error) {
      this.logError(`ÏÑúÎπÑÏä§ Ï†úÌïú Í∞êÏßÄ Ïò§Î•ò: ${error.message}`);
      return false;
    }
  }

  /**
   * Ïä§ÌÜ†Ïñ¥ ÌôàÌéòÏù¥ÏßÄÏóêÏÑú Îã§Ïãú Í≤ÄÏÉâ ÏãúÎèÑ
   */
  async retryFromStorePage(searchKeyword) {
    try {
      this.logInfo('Ïä§ÌÜ†Ïñ¥ ÌôàÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô Ï§ë...');

      // Ïä§ÌÜ†Ïñ¥ ÌôàÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      await this.page.goto('https://shopping.naver.com/ns/home', {
        waitUntil: 'domcontentloaded',
        timeout: this.options.timeout,
      });

      await this.randomWait(3000, 5000);
      this.logSuccess('Ïä§ÌÜ†Ïñ¥ ÌôàÌéòÏù¥ÏßÄ Î°úÎî© ÏôÑÎ£å');

      // Îã§Ïãú Í≤ÄÏÉâ ÏãúÎèÑ
      this.logInfo(`Îã§Ïãú Í≤ÄÏÉâ ÏãúÎèÑ: ${searchKeyword}`);

      // Í≤ÄÏÉâÏ∞Ω Ï∞æÍ∏∞
      const searchInput =
        (await this.page.$('input[placeholder*="ÏÉÅÌíàÎ™Ö ÎòêÎäî Î∏åÎûúÎìú"]')) ||
        (await this.page.$('input[title*="Í≤ÄÏÉâÏñ¥"]')) ||
        (await this.page.$('input[class*="searchInput"][class*="text"]'));

      if (!searchInput) {
        throw new Error('Í≤ÄÏÉâÏ∞ΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
      }

      this.logInfo('Í≤ÄÏÉâÏ∞Ω Î∞úÍ≤¨ - Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• Ï§ë...');

      // Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•
      await this.naturalHover('input[placeholder*="ÏÉÅÌíàÎ™Ö ÎòêÎäî Î∏åÎûúÎìú"]');
      await searchInput.click();
      await this.randomWait(300, 800);

      await searchInput.fill('');
      await this.randomWait(200, 400);

      for (const char of searchKeyword) {
        await searchInput.type(char);
        await this.randomWait(100, 300);
      }
      await this.randomWait(500, 1000);

      // Enter ÌÇ§Î°ú Í≤ÄÏÉâ
      this.logInfo('Enter ÌÇ§Î°ú Í≤ÄÏÉâ Ïã§Ìñâ...');
      await searchInput.press('Enter');
      await this.randomWait(2000, 4000);

      // Îã§Ïãú Í≤ÄÏÉâ Í≤∞Í≥º Î°úÎî© ÎåÄÍ∏∞
      await this.page.waitForLoadState('domcontentloaded', { timeout: 15000 });
      await this.randomWait(3000, 5000);

      // Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨
      await this.waitForSecurityCheck();

      this.logSuccess('Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Îã§Ïãú Í≤ÄÏÉâ ÏôÑÎ£å');

      // ÏµúÏ¢Ö HTML ÎÇ¥Ïö© Ï∂îÏ∂ú
      const htmlContent = await this.page.content();
      const currentUrl = this.page.url();

      this.logInfo(`ÏµúÏ¢Ö URL: ${currentUrl}`);
      this.logInfo(`HTML Í∏∏Ïù¥: ${htmlContent.length.toLocaleString()}Ïûê`);

      return {
        html: htmlContent,
        url: currentUrl,
        savedPath: null,
        retried: true, // Ïû¨ÏãúÎèÑ ÌîåÎûòÍ∑∏
        stats: {
          crawlCount: 1,
          nextSessionReset: 10,
          tlsSupport: 'TLSv1.3',
        },
      };
    } catch (error) {
      this.logError(`Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Îã§Ïãú Í≤ÄÏÉâ Ïã§Ìå®: ${error.message}`);
      throw error;
    }
  }

  /**
   * ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎßàÏö∞Ïä§ Ìò∏Î≤Ñ Ïï°ÏÖò
   */
  async naturalHover(selector) {
    const element = await this.page.$(selector);
    if (element) {
      // ÏöîÏÜå ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
      const box = await element.boundingBox();
      if (box) {
        const viewport = this.page.viewportSize();
        const startX = Math.random() * viewport.width * 0.3;
        const startY = Math.random() * viewport.height * 0.3;
        const endX = box.x + box.width / 2;
        const endY = box.y + box.height / 2;

        // ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎßàÏö∞Ïä§ ÏõÄÏßÅÏûÑ ÏãúÎÆ¨Î†àÏù¥ÏÖò
        await AntiDetectionUtils.naturalMouseMovement(
          this.page,
          { x: startX, y: startY },
          { x: endX, y: endY },
          15
        );
      }

      await element.hover();
      await this.randomWait(200, 800);
    }
  }

  /**
   * ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î°§
   */
  async naturalScroll() {
    // Îçî ÏûêÏó∞Ïä§Îü¨Ïö¥ Îã®Í≥ÑÏ†Å Ïä§ÌÅ¨Î°§
    await this.page.evaluate(async () => {
      const scrollHeight = document.body.scrollHeight;
      const viewportHeight = window.innerHeight;
      const scrollStep = viewportHeight / 4;

      for (
        let y = 0;
        y < Math.min(scrollHeight, viewportHeight * 2);
        y += scrollStep
      ) {
        window.scrollTo(0, y);
        await new Promise((resolve) =>
          setTimeout(resolve, 150 + Math.random() * 100)
        );
      }
    });
    await this.randomWait(300, 800);
  }

  /**
   * ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Í≤ÄÏÉâ ÌîÑÎ°úÏÑ∏Ïä§ ÏàòÌñâ
   */
  async scrapeProduct(searchKeyword = 'ÏùòÏûê') {
    if (!this.page) {
      await this.init();
    }

    try {
      // ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Î™®Î∞îÏùº Í≤ÄÏÉâ ÌôàÌéòÏù¥ÏßÄ ÏßÅÏ†ë Ï†ëÏÜç
      this.logInfo('ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Î™®Î∞îÏùº Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ Ï†ëÏÜç Ï§ë...');
      const url = 'https://search.shopping.naver.com/home';

      await this.page.goto(url, {
        waitUntil: 'networkidle',
        timeout: this.options.timeout,
      });

      // ÌéòÏù¥ÏßÄ ÏïàÏ†ïÏ†Å Î°úÎî© ÎåÄÍ∏∞
      await AntiDetectionUtils.waitForStableLoad(this.page);

      // Ï∫°Ï∞® Î∞è Î≥¥Ïïà ÌôïÏù∏ Ï≤òÎ¶¨
      await this.waitForSecurityCheck();

      // ÌéòÏù¥ÏßÄ Ïû¨Î°úÎî© ÎåÄÍ∏∞ (Ï∫°Ï∞® ÏôÑÎ£å ÌõÑ)
      await this.randomWait(3000, 5000);

      this.logSuccess('ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ Î°úÎî© ÏôÑÎ£å');

      // Í≤ÄÏÉâÏ∞Ω Ï∞æÍ≥† Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•
      this.logInfo('Í≤ÄÏÉâÏ∞Ω Ï∞æÎäî Ï§ë...');

      // Í≤ÄÏÉâÏ∞Ω ÏöîÏÜå ÏÉàÎ°ú Ï∞æÍ∏∞ (Ï∫°Ï∞® ÏôÑÎ£å ÌõÑ DOM Î≥ÄÍ≤Ω ÎåÄÏùë)
      let searchInput = null;
      let attempts = 0;
      const maxAttempts = 5;

      while (!searchInput && attempts < maxAttempts) {
        attempts++;
        this.logInfo(`Í≤ÄÏÉâÏ∞Ω Ï∞æÍ∏∞ ÏãúÎèÑ ${attempts}/${maxAttempts}...`);

        await this.randomWait(2000, 3000);

        searchInput =
          (await this.page.$(
            'input[placeholder*="ÏÉÅÌíàÎ™Ö ÎòêÎäî Î∏åÎûúÎìú ÏûÖÎ†•"]'
          )) ||
          (await this.page.$('input[title*="Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•"]')) ||
          (await this.page.$('input[class*="searchInput"][type*="text"]')) ||
          (await this.page.$('input[type="text"]'));
      }

      if (!searchInput) {
        throw new Error('Í≤ÄÏÉâÏ∞ΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
      }

      this.logInfo(`Í≤ÄÏÉâÏ∞Ω Î∞úÍ≤¨ - "${searchKeyword}" ÏûÖÎ†• Ï§ë...`);

      // Í≤ÄÏÉâÏ∞ΩÏóê Ïã§Ï†úÎ°ú ÌÅ¥Î¶≠ÌïòÍ≥† Ìè¨Ïª§Ïä§ ÏÑ§Ï†ï
      try {
        // Î®ºÏ†Ä Í≤ÄÏÉâÏ∞ΩÏù¥ Î≥¥Ïù¥ÎäîÏßÄ ÌôïÏù∏
        await this.page.waitForSelector('input[type="text"]', {
          timeout: 10000,
        });

        // Ïä§ÌÅ¨Î°§Ìï¥ÏÑú Í≤ÄÏÉâÏ∞ΩÏù¥ Î≥¥Ïù¥ÎèÑÎ°ù
        await searchInput.scrollIntoViewIfNeeded();
        await this.randomWait(1000, 2000);

        // Í≤ÄÏÉâÏ∞Ω ÏßÅÏ†ë ÌÅ¥Î¶≠
        await searchInput.click();
        await this.randomWait(500, 1000);
      } catch (clickError) {
        this.logInfo(
          `ÏßÅÏ†ë ÌÅ¥Î¶≠ Ïã§Ìå®: ${clickError.message} - Ï¢åÌëúÎ°ú ÌÅ¥Î¶≠ ÏãúÎèÑ`
        );

        // Ï¢åÌëúÎ°ú ÌÅ¥Î¶≠
        const box = await searchInput.boundingBox();
        if (box) {
          await this.page.mouse.click(
            box.x + box.width / 2,
            box.y + box.height / 2
          );
          await this.randomWait(500, 1000);
        }
      }

      // Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÌõÑ ÏûÖÎ†•
      await this.page.keyboard.press('Control+A');
      await this.randomWait(200, 400);

      // ÌïúÍ∏ÄÏûêÏî© ÌÉÄÏù¥Ìïë
      for (const char of searchKeyword) {
        await this.page.keyboard.type(char);
        await this.randomWait(100, 300);
      }
      await this.randomWait(500, 1000);

      // 4Îã®Í≥Ñ: Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ (Ïó¨Îü¨ Î∞©Î≤ï ÏãúÎèÑ)
      this.logInfo('Í≤ÄÏÉâ Ïã§Ìñâ Ï§ë...');

      try {
        // Î∞©Î≤ï 1: Enter ÌÇ§ ÏûÖÎ†• (Í∞ÄÏû• ÏûêÏó∞Ïä§Îü¨Ïö¥ Î∞©Î≤ï)
        this.logInfo('Enter ÌÇ§Î°ú Í≤ÄÏÉâ ÏãúÎèÑ...');
        await this.page.keyboard.press('Enter');
        await this.randomWait(1500, 3000);
      } catch (enterError) {
        this.logInfo('Enter ÌÇ§ Ïã§Ìå®, Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ...');

        // Î∞©Î≤ï 2: Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ (data ÏÜçÏÑ± Í∏∞Î∞ò)
        const searchButton =
          (await this.page.$('button[data-shp-area-id="search"]')) ||
          (await this.page.$(
            'button[class*="searchInput"][class*="search"]'
          )) ||
          (await this.page.$('button:has(span.blind:text("Í≤ÄÏÉâ"))')) ||
          (await this.page.$('button:has(svg circle)'));

        if (!searchButton) {
          throw new Error('Í≤ÄÏÉâ Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }

        // Í≤ÄÏÉâ Î≤ÑÌäºÏóê Ìò∏Î≤Ñ ÌõÑ ÌÅ¥Î¶≠
        await this.naturalHover('button[data-shp-area-id="search"]');
        await searchButton.click();
      }

      // Í≤ÄÏÉâ Í≤∞Í≥º Î°úÎî© ÎåÄÍ∏∞ (Îçî ÏïàÏ†ïÏ†ÅÏù∏ ÎåÄÍ∏∞)
      await this.page.waitForLoadState('domcontentloaded', { timeout: 15000 });
      await this.randomWait(3000, 5000);

      // Í≤ÄÏÉâ ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú ÌôïÏù∏
      this.logInfo('üîç Í≤ÄÏÉâ ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...');
      const searchResultUrl = this.page.url();
      this.logInfo(`üìç Í≤ÄÏÉâ Í≤∞Í≥º URL: ${searchResultUrl}`);

      const searchResultTitle = await this.page.title();
      this.logInfo(`üìã Í≤ÄÏÉâ Í≤∞Í≥º ÌéòÏù¥ÏßÄ Ï†úÎ™©: ${searchResultTitle}`);

      // Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨
      await this.waitForSecurityCheck();

      this.logSuccess('Í≤ÄÏÉâ ÏôÑÎ£å');

      // 5Îã®Í≥Ñ: Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº Ï∞æÍ∏∞ (ÏàòÎèô ÌÅ¥Î¶≠ ÎåÄÍ∏∞)
      this.logInfo('Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº Ï∞æÎäî Ï§ë...');

      // Í≤ÄÏÉâÏñ¥ URL Ïù∏ÏΩîÎî©
      const searchText = searchKeyword;
      const encodedQuery = encodeURIComponent(searchText);
      this.logInfo(`Í≤ÄÏÉâÏñ¥: ${searchText} (Ïù∏ÏΩîÎî©: ${encodedQuery})`);

      // DOMÏù¥ ÏïàÏ†ïÌôîÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
      await this.randomWait(3000, 5000);

      // Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº Ï∞æÍ∏∞
      const buttonSelectors = [
        `a[href*="search.shopping.naver.com"][href*="query=${encodedQuery}"]`,
        'a[class*="_gnbContent_link_search"]',
        'a:has-text("Í≤ÄÏÉâÏóêÏÑú ÎçîÎ≥¥Í∏∞")',
        'a:has-text("ÎçîÎ≥¥Í∏∞")',
        'a[href*="search.shopping.naver.com"]',
      ];

      let buttonFound = false;
      let foundSelector = '';

      for (const selector of buttonSelectors) {
        try {
          await this.page.waitForSelector(selector, {
            state: 'visible',
            timeout: 3000,
          });

          // Î≤ÑÌäº ÌïòÏù¥ÎùºÏù¥Ìä∏ (ÏãúÍ∞ÅÏ†Å ÌëúÏãú)
          await this.page.evaluate((sel) => {
            const button = document.querySelector(sel);
            if (button) {
              button.style.border = '3px solid red';
              button.style.backgroundColor = 'yellow';
              button.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }, selector);

          foundSelector = selector;
          buttonFound = true;
          this.logSuccess(`‚úÖ Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº Î∞úÍ≤¨: ${selector}`);
          break;
        } catch (error) {
          continue;
        }
      }

      if (!buttonFound) {
        this.logError('‚ùå Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞ Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');

        // ÌéòÏù¥ÏßÄÏùò Î™®Îì† ÎßÅÌÅ¨Î•º Ï∞æÏïÑÏÑú Í¥ÄÎ†®Îêú Í≤ÉÎì§ Ï∂úÎ†•
        const links = await this.page.evaluate(() => {
          const allLinks = Array.from(document.querySelectorAll('a'));
          return allLinks
            .filter(
              (a) =>
                a.textContent.includes('ÎçîÎ≥¥Í∏∞') ||
                a.textContent.includes('Í≤ÄÏÉâ') ||
                a.href.includes('shopping')
            )
            .map((a) => ({ text: a.textContent.trim(), href: a.href }))
            .slice(0, 10);
        });

        this.logInfo('üìã Í¥ÄÎ†® ÎßÅÌÅ¨Îì§:');
        links.forEach((link, index) => {
          console.log(`${index + 1}. "${link.text}" -> ${link.href}`);
        });
      }

      // ÏàòÎèô ÌÅ¥Î¶≠ ÎåÄÍ∏∞ Î©îÏãúÏßÄ
      this.logInfo('üñ±Ô∏è  ÏÇ¨Ïö©Ïûê ÏàòÎèô Ï°∞Ïûë ÎåÄÍ∏∞ Ï§ë...');
      this.logInfo(
        'üëÜ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú "Í∞ÄÍ≤©ÎπÑÍµê ÎçîÎ≥¥Í∏∞" Î≤ÑÌäºÏùÑ ÏßÅÏ†ë ÌÅ¥Î¶≠Ìï¥ Ï£ºÏÑ∏Ïöî'
      );
      this.logInfo('‚è±Ô∏è  ÏµúÎåÄ 5Î∂ÑÍ∞Ñ ÎåÄÍ∏∞Ìï©ÎãàÎã§...');

      // ÌéòÏù¥ÏßÄ URL Î≥ÄÍ≤ΩÏùÑ Í∞êÏßÄÌïòÏó¨ ÌÅ¥Î¶≠ ÏôÑÎ£å ÌôïÏù∏
      let currentUrl = this.page.url();
      const maxWaitTime = 5 * 60 * 1000; // 5Î∂Ñ
      const checkInterval = 1000; // 1Ï¥àÎßàÎã§ ÌôïÏù∏
      let waitedTime = 0;

      while (waitedTime < maxWaitTime) {
        await this.page.waitForTimeout(checkInterval);
        waitedTime += checkInterval;

        const newUrl = this.page.url();

        // URLÏù¥ Î≥ÄÍ≤ΩÎêòÍ≥† ÏáºÌïë Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌñàÎäîÏßÄ ÌôïÏù∏
        if (
          newUrl !== currentUrl &&
          newUrl.includes('search.shopping.naver.com')
        ) {
          this.logSuccess('‚úÖ Í∞ÄÍ≤©ÎπÑÍµê Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô ÏôÑÎ£å!');
          break;
        }

        // ÏßÑÌñâ ÏÉÅÌô© Î°úÍ∑∏ (30Ï¥àÎßàÎã§)
        if (waitedTime % 30000 === 0) {
          const remainingMinutes = Math.ceil(
            (maxWaitTime - waitedTime) / 60000
          );
          this.logInfo(`‚è≥ ÎåÄÍ∏∞ Ï§ë... (ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${remainingMinutes}Î∂Ñ)`);
        }
      }

      if (waitedTime >= maxWaitTime) {
        this.logError('‚ö†Ô∏è ÏàòÎèô ÌÅ¥Î¶≠ ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º (5Î∂Ñ)');
        throw new Error('ÏÇ¨Ïö©Ïûê ÏàòÎèô ÌÅ¥Î¶≠ ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º');
      }

      // Í∞ÄÍ≤©ÎπÑÍµê ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞ (Îçî ÏïàÏ†ïÏ†ÅÏù∏ ÎåÄÍ∏∞)
      await this.page.waitForLoadState('domcontentloaded', { timeout: 15000 });
      await this.randomWait(3000, 5000);

      // ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨
      const isBlocked = await this.checkServiceRestriction();
      if (isBlocked) {
        this.logInfo(
          'ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú Í∞êÏßÄ - Ïä§ÌÜ†Ïñ¥ ÌôàÌéòÏù¥ÏßÄÏóêÏÑú Îã§Ïãú Í≤ÄÏÉâ ÏãúÎèÑ...'
        );
        return await this.retryFromStorePage(searchKeyword);
      }

      // Î≥¥Ïïà ÌôïÏù∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨
      await this.waitForSecurityCheck();

      this.logSuccess('Í∞ÄÍ≤©ÎπÑÍµê Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ Ïù¥Îèô ÏôÑÎ£å');

      // ÏµúÏ¢Ö HTML ÎÇ¥Ïö© Ï∂îÏ∂ú
      const htmlContent = await this.page.content();
      currentUrl = this.page.url();

      this.logInfo(`ÏµúÏ¢Ö URL: ${currentUrl}`);
      this.logInfo(`HTML Í∏∏Ïù¥: ${htmlContent.length.toLocaleString()}Ïûê`);

      return {
        html: htmlContent,
        url: currentUrl,
        savedPath: null,
        stats: {
          crawlCount: 1,
          nextSessionReset: 10,
          tlsSupport: 'TLSv1.3',
        },
      };
    } catch (error) {
      this.logError(`ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Í≤ÄÏÉâ ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®: ${error.message}`);

      // ÏóêÎü¨ Ïãú Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï†ÄÏû•
      if (this.page) {
        await this.page.screenshot({
          path: `error-naver-shopping-${Date.now()}.png`,
          fullPage: true,
        });
      }

      throw error;
    } finally {
      // Î∏åÎùºÏö∞Ï†Ä Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
      await this.close();
    }
  }

  /**
   * HTMLÏùÑ ÌååÏùºÎ°ú Ï†ÄÏû•
   */
  async saveHtml(htmlContent, filename = null) {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const defaultFilename = `result/naver-shopping-${timestamp}.html`;
      const filepath = filename || defaultFilename;

      // result ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
      const resultDir = 'result';
      if (!fs.existsSync(resultDir)) {
        await fsPromises.mkdir(resultDir, { recursive: true });
      }

      await fsPromises.writeFile(filepath, htmlContent, 'utf8');
      this.logSuccess(`HTML ÌååÏùº Ï†ÄÏû• ÏôÑÎ£å: ${filepath}`);

      return filepath;
    } catch (error) {
      this.logError(`HTML ÌååÏùº Ï†ÄÏû• Ïã§Ìå®: ${error.message}`);
      throw error;
    }
  }

  /**
   * ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë ÌôàÌéòÏù¥ÏßÄ Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìñâ
   */
  async scrapeHomepage() {
    try {
      this.logInfo('ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë ÌôàÌéòÏù¥ÏßÄ Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë');

      // Playwright Ï¥àÍ∏∞Ìôî
      const initialized = await this.init();
      if (!initialized) {
        throw new Error('Playwright Ï¥àÍ∏∞Ìôî Ïã§Ìå®');
      }

      // ÌôàÌéòÏù¥ÏßÄ HTML Í∞ÄÏ†∏Ïò§Í∏∞
      const htmlContent = await this.getHomepageHtml();

      // HTML ÌååÏùº Ï†ÄÏû•
      let savedPath = null;
      if (this.options.saveData) {
        savedPath = await this.saveHtml(htmlContent);
      }

      this.logSuccess('ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë ÌôàÌéòÏù¥ÏßÄ Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å');

      return {
        html: htmlContent,
        savedPath: savedPath,
        url: 'https://shopping.naver.com/ns/home',
        crawledAt: new Date().toISOString(),
      };
    } catch (error) {
      this.logError(`ÎÑ§Ïù¥Î≤Ñ ÏáºÌïë Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®: ${error.message}`);
      throw error;
    } finally {
      await this.close();
    }
  }

  async close() {
    try {
      if (this.page) {
        await this.page.close();
        this.page = null;
      }
      if (this.context) {
        await this.context.close();
        this.context = null;
      }
      if (this.browser) {
        await this.browser.close();
        this.browser = null;
      }
      this.logSuccess('Playwright Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å ÏôÑÎ£å');

      // Î∂ÄÎ™® ÌÅ¥ÎûòÏä§ Ï†ïÎ¶¨ Ìò∏Ï∂ú
      await super.close();
    } catch (error) {
      this.logError(`Playwright Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å Ïã§Ìå®: ${error.message}`);
    }
  }
}

export default NaverShoppingScraper;
